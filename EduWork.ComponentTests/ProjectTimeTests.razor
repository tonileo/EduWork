@using Common.DTO.ProjectTime
@using EduWork.UI.Pages
@using EduWork.UI.Pages.ProjectTime
@using Microsoft.AspNetCore.Components.Forms
@using RichardSzalay.MockHttp

@inherits TestContext

@code {
    private List<ProjectSmallDto> GetProjects()
    {
        var projects = new List<ProjectSmallDto>
        {
            new ProjectSmallDto { Id = 1, Title = "Test1" },
            new ProjectSmallDto { Id = 2, Title = "Test2" }
        };

        return projects;
    }

    private OvertimeDto GetOvertime()
    {
        var overtime = new OvertimeDto { OvertimeHours = 1, OvertimeMinutes = 1};

        return overtime;
    }

    private void SetupMockHttpClient()
    {
        var mock = Services.AddMockHttpClient();
        mock.When("http://localhost/api/ProjectTimes/projects").RespondJson(GetProjects());
        mock.When("http://localhost/api/ProjectTimes/overtime").RespondJson(GetOvertime());
    }

    [Fact]
    public void InitialHeadingOnPageLoad()
    {
        // Arrange
        SetupMockHttpClient();
        const string INPUT_PROJECT_TIME_TITLE = "Unos projektnog vremena";

        // Act
        var cut = Render(@<InputProjectTime />);

        // Assert
        var pageTitleComponent = cut.FindComponent<PageTitle>();
        pageTitleComponent.MarkupMatches(@<PageTitle>@INPUT_PROJECT_TIME_TITLE</PageTitle>);
    }

    [Fact]
    public void InputDateSetCorrectlyOnPageLoad()
    {
        // Arrange
        SetupMockHttpClient();

        // Act
        var cut = RenderComponent<InputProjectTime>();

        // Assert
        var inputDate = cut.Find("input[type='date']");
        Assert.NotNull(inputDate);
        Assert.Equal("date", inputDate.Id);
        Assert.Equal("form-control valid", inputDate.ClassList.ToString());
    }

    [Fact]
    public void InputDateSetToTodayOnLoad()
    {
        // Arrange
        SetupMockHttpClient();

        // Act
        var cut = RenderComponent<InputProjectTime>(parameters => parameters.Add(p => p.date, null));
        cut.WaitForState(() => cut.Instance.date.HasValue);

        // Assert
        var inputDate = cut.Find("input[type='date']");
        var today = DateTime.Today.ToString("yyyy-MM-dd");
        Assert.Equal(today, inputDate.GetAttribute("value"));
    }

    [Fact]
    public void InputDateWhenClickedOnSubtractDateButtonShowsYesterdaysDate()
    {
        // Arrange
        SetupMockHttpClient();

        var cut = RenderComponent<InputProjectTime>(parameters => parameters.Add(p => p.date, null));
        cut.WaitForState(() => cut.Instance.date.HasValue);
        var inputDate = cut.Find("input[type='date']");

        // Act
        cut.Find("#subtractDateButton").Click();

        // Assert
        var yesterday = DateTime.Today.AddDays(-1).ToString("yyyy-MM-dd");
        Assert.Equal(yesterday, inputDate.GetAttribute("value"));
    }

    [Fact]
    public void InputDateOnLoadWhenClickedOnAddDateButtonItWontAddDate()
    {
        // Arrange
        SetupMockHttpClient();

        var cut = RenderComponent<InputProjectTime>(parameters => parameters.Add(p => p.date, null));
        cut.WaitForState(() => cut.Instance.date.HasValue);
        var inputDate = cut.Find("input[type='date']");

        // Act
        cut.Find("#addDateButton").Click();

        // Assert
        var today = DateTime.Today.ToString("yyyy-MM-dd");
        Assert.Equal(today, inputDate.GetAttribute("value"));
    }

    [Fact]
    public void InputDateIfNotTodayDateWhenClickedOnAddDateButtonItWillAddDate()
    {
        // Arrange
        SetupMockHttpClient();

        var cut = RenderComponent<InputProjectTime>(parameters => parameters.Add(p => p.date, DateTime.Today));
        cut.WaitForState(() => cut.Instance.date.HasValue);
        var inputDate = cut.Find("input[type='date']");

        // Act
        cut.Find("#addDateButton").Click();

        // Assert
        var today = DateTime.Today.ToString("yyyy-MM-dd");
        Assert.Equal(today, inputDate.GetAttribute("value"));
    }

    [Fact]
    public void InputDateSetCorrectlyBasedOnParameters()
    {
        // Arrange
        SetupMockHttpClient();

        var yesterdayDay = DateTime.Today.AddDays(-1);

        // Act
        var cut = RenderComponent<InputProjectTime>(parameters => parameters.Add(p => p.date, yesterdayDay));
        cut.WaitForState(() => cut.Instance.date.HasValue);
        var inputDate = cut.Instance.date;

        // Assert
        var yesterday = DateTime.Today.AddDays(-1).ToString("yyyy-MM-dd");
        Assert.Equal(yesterday, inputDate.Value.ToString("yyyy-MM-dd"));
    }

    [Fact]
    public void InputHoursSetToDeafultOnLoad()
    {
        // Arrange
        SetupMockHttpClient();

        // Act
        var cut = RenderComponent<InputProjectTime>();
        var inputHours = cut.Find("input#timeSpentHours");
        var inputHourDeafult = "7";

        // Assert
        Assert.Equal(inputHourDeafult, inputHours.GetAttribute("value"));
    }

    [Fact]
    public void InputMinutesSetToDeafultOnLoad()
    {
        // Arrange
        SetupMockHttpClient();

        // Act
        var cut = RenderComponent<InputProjectTime>();
        var inputMinutes = cut.Find("input#timeSpentMinutes");
        var inputMinutesDeafult = "30";

        // Assert
        Assert.Equal(inputMinutesDeafult, inputMinutes.GetAttribute("value"));
    }

    [Fact]
    public void InputTimeRangeSetToDeafultOnLoad()
    {
        // Arrange
        SetupMockHttpClient();

        // Act
        var cut = RenderComponent<InputProjectTime>();
        var inputRange = cut.Find("input[type='range']");
        var inputRangeDeafult = "450";

        // Assert
        Assert.Equal(inputRangeDeafult, inputRange.GetAttribute("value"));
    }
}
