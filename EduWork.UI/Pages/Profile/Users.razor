@page "/users"
@using Common.DTO.Profile
@using EduWork.UI.Components.Profile

@inject HttpClient Http

@if (users == null || projects == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="container text-center">
        <div class="d-flex flex-row justify-content-center align-items-center">
            <input class="m-1 w-50 form-control search-user" placeholder="Enter email..." @onchange="InputChanged" />

            <select class="form-select m-1 w-25 select-project" @onchange="HandleOnChangeProject">
              <option value="0" selected>All projects</option>
                @foreach (var project in projects)
                {
                    <option value="@project.Id">@project.Title</option>
                }
            </select>

            <select class="form-select m-1 w-25 order-select" @onchange="HandleOnChangeSort">
              <option value="1" selected>Username A-Z</option>
              <option value="2">Username Z-A</option>
            </select>

            <button class="btn btn-primary m-1 filter" @onclick="FilterUsers">Search</button>
        </div>
    </div>

    <div class="container my-4">
        <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-4 g-5">
            @if (filteredUsers != null)
            {
                @foreach (var user in filteredUsers)
                {
                    <div class="col">
                        <SmallProfileComponent User=@user></SmallProfileComponent>
                    </div>
                }
            }
        </div>
    </div>
}

@code {
    private List<UserProfileDto>? users = new List<UserProfileDto>();
    private List<ProjectsProfileDto>? projects = new List<ProjectsProfileDto>();
    private List<UserProfileDto>? filteredUsers;
    string searchString = "";

    private string SortSelected { get; set; } = "1";
    private string ProjectSelected { get; set; } = "0";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            users = await Http.GetFromJsonAsync<List<UserProfileDto>>("api/UserProfiles");
            projects = await Http.GetFromJsonAsync<List<ProjectsProfileDto>>("api/UserProfiles/projects");

        }catch(Exception e)
        {
            Console.WriteLine(e.Message);
        }

        filteredUsers = users;
    }

    private void InputChanged(ChangeEventArgs e)
    {
        if(e.Value == null){ 
            return; 
        }
        searchString = e.Value.ToString().ToLower();
        FilterUsers();
    }

    private void FilterUsers()
    {
        if (string.IsNullOrWhiteSpace(searchString))
        {
            filteredUsers = users;
        }
        else
        {
            filteredUsers = users?.Where(u => u.Email.Contains(searchString)).ToList();
        }

        if (ProjectSelected != "0")
        {
            // filteredUsers = filteredUsers.Where(fu => fu.Projects.Any(p => p.Id == int.Parse(ProjectSelected))).ToList();
        }

        if (SortSelected == "1")
        {
            filteredUsers = filteredUsers.OrderBy(fu => fu.Username).ToList();
        }
        else
        {
            filteredUsers = filteredUsers.OrderByDescending(fu => fu.Username).ToList();
        }
    }

    private void HandleOnChangeSort(ChangeEventArgs args)
    {
        SortSelected = args.Value.ToString();
    }

    private void HandleOnChangeProject(ChangeEventArgs args)
    {
        ProjectSelected = args.Value.ToString();
    }

}
