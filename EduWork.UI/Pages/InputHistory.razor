@page "/inputHistory"
@using Common.DTO.ProjectTime
@using EduWork.UI.Features.ProjectTime

@inject NavigationManager NavigationManager
@inject HttpClient Http

<PageTitle>Povijest unosa</PageTitle>

<h3>Povijest unosa</h3>

<button type="button" @onclick="() => FilterDate(1)">Prošli mjesec</button>
<button type="button" @onclick="() => FilterDate(2)">Trenutni mjesec</button>
<button type="button" @onclick="() => FilterDate(3)">Trenutno tromjesječje</button>

<div class="row">
    <table class="table">
        <thead class="thead-dark">
            <tr>
                <th class="text-center">Radni dan</th>
                <th class="text-center">Projekt</th>
                <th class="text-center">Provedno vrijeme</th>
                <th class="text-center">Komentar</th>
                <th class="text-center">Ukupno provedno vremena</th>
            </tr>
        </thead>
        <tbody>
            @if (projectTimeHistoryDto == null)
            {
                <tr>
                    <td class="text-center"><em>Loading...</em></td>
                </tr>
            }
            else
            {
                @foreach (var projectTimeLog in projectTimeHistoryDto)
                {
                    <tr style="background-color:@(GetRowColor(projectTimeLog.SumTimeSpentHours, projectTimeLog.SumTimeSpentMinutes, projectTimeLog.IsNonWorkingDay))" @onclick="() => ToggleRow(projectTimeLog)">
                        <td class="text-center">
                            @if (projectTimeLog.IsNonWorkingDay)
                            {
                                @projectTimeLog.DateWorkDay
                            }
                            else
                            {
                                <a href="@("/inputProjectTime/" + projectTimeLog.DateWorkDay.ToString("MM-dd-yyyy"))">
                                    @projectTimeLog.DateWorkDay
                                </a>
                            }
                        </td>
                        <td class="text-center">@projectTimeLog.TitleProject</td>
                        <td class="text-center">@projectTimeLog.TimeSpentMinutes</td>
                        <td class="text-center">@projectTimeLog.Comment</td>
                        <td class="text-center">
                            <span>@projectTimeLog.SumTimeSpentHours</span> h :
                            <span>@projectTimeLog.SumTimeSpentMinutes</span> min
                        </td>

                    </tr>

                    @if (expandedRow == projectTimeLog)
                    {
                        <tr>
                            <td colspan="5">
                                <div class="expanded-content">
                                    <p>Details for @projectTimeLog.DateWorkDay:</p>
                                    <ul>
                                        <li>Additional Detail 1</li>
                                        <li>Additional Detail 2</li>
                                    </ul>
                                </div>
                            </td>
                        </tr>
                    }
                }
            }
        </tbody>
    </table>

</div>

@code {
    private List<ProjectTimeHistoryDto>? projectTimeHistoryDto;
    private ProjectTimeDtoTest? selectedProjectTime;

    private ProjectTimeDtoTest? openedProjectTime;

    private bool lastMonth;

    private ProjectTimeHistoryDto? expandedRow;

    protected override async Task OnInitializedAsync()
    {
        await LoadData("");
    }

    private async Task LoadData(string parameters)
    {
        try
        {
            projectTimeHistoryDto = await Http.GetFromJsonAsync<List<ProjectTimeHistoryDto>>("api/ProjectTimes/historyFilter" + $"{parameters}");

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error fetching projectTime: {ex.Message}");
        }
    }

    private async void FilterDate(int filterDate)
    {
        string parameters;

        if (filterDate == 1)
        {
            parameters = $"?lastMonth=true";
            await LoadData(parameters);
        }
        else if (filterDate == 2)
        {
            parameters = $"?thisMonth=true";
            await LoadData(parameters);
        }
        else if (filterDate == 3)
        {
            parameters = $"?thisQuarter=true";
            await LoadData(parameters);
        }
    }

    private void ToggleRow(ProjectTimeHistoryDto projectTimeLog)
    {
        if (expandedRow == projectTimeLog)
        {
            expandedRow = null;
        }
        else
        {
            expandedRow = projectTimeLog;
        }
    }

    private string GetRowColor(int hours, int minutes, bool isNonWorkingDay)
    {
        var totalMinutes = hours * 60 + minutes;

        if (isNonWorkingDay)
        {
            return "lightgray";
        }
        else if (totalMinutes == 0)
        {
            return "lightcoral";
        }
        else if (totalMinutes >= 450)
        {
            return "lightgreen";
        }
        else
        {
            return "lightgoldenrodyellow";
        }
    }
}
