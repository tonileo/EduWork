@page "/inputProjectTime"

@using Common.DTO.ProjectTime
@using EduWork.UI.Features.ProjectTime

@inject HttpClient Http

<PageTitle>Unos projektnog vremena</PageTitle>

<div class="flex-container">
    <div class="form-section">


        <div class="form-container">
            <h3 class="mb-4">Unos projektnog vremena</h3>

            <EditForm Model="@projectTimeRequest" OnValidSubmit="@Submit">
                <DataAnnotationsValidator />
                <ValidationSummary class="alert alert-danger" />

                <div>
                    <div class="form-group mb-3">
                        <label for="date">Radni dan:</label>

                        <div class="input-group">
                            <button type="button" @onclick="() => ChangeDate(-1)" class="chevron"><span><i class="fa fa-chevron-left"></i></span></button>
                            <InputDate id="date" @bind-Value="projectTimeRequest.DateWorkDay" @oninput="HandleDateInput" class=" form-control" />
                            <button type="button" @onclick="() => ChangeDate(1)" class="chevron"><span><i class="fa fa-chevron-right"></i></span></button>
                        </div>

                        <ValidationMessage For="@(() => projectTimeRequest.DateWorkDay)" />
                    </div>

                    <div class="form-group mb-3">
                        <label for="titleProject">Projekt:</label>
                        <InputSelect id="titleProject" @bind-Value="projectTimeRequest.TitleProject" class="form-control">
                            @if (projects == null)
                            {
                                <option>Loading...</option>
                            }
                            else
                            {
                                <option value="" disabled selected>-- Odaberi projekt --</option>
                                @foreach (var project in projects)
                                {
                                    <option value="@project.Title">@project.Title</option>
                                }
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => projectTimeRequest.TitleProject)" />
                    </div>
                </div>

                <div class="form-group mb-3">
                    <label for="comment">Komentar:</label>
                    <InputTextArea id="comment" @bind-Value="projectTimeRequest.Comment" class="form-control" rows="5" />
                    <ValidationMessage For="@(() => projectTimeRequest.Comment)" />
                </div>

                <div class="form-group mb-3">
                    <label for="timeSpentMinutes">Vrijeme provedeno na projektu (minute):</label>
                    <div class="input-group-horizontal">
                        <InputNumber id="timeSpentMinutes" @bind-Value="projectTimeRequest.TimeSpentMinutes" class="form-control" min="0" required style="width: 100px;" />
                        <input type="range" id="timeSpentMinutesRange" @bind="projectTimeRequest.TimeSpentMinutes" class="form-range" min="0" max="480" step="1" />
                        <ValidationMessage For="@(() => projectTimeRequest.TimeSpentMinutes)" />
                    </div>
                </div>

                <div class="form-group">
                    <button type="submit" class="btn btn-primary me-2">Podnesni</button>
                    <button type="button" class="btn btn-secondary" @onclick="ClearForm">Očisti</button>
                </div>
            </EditForm>
        </div>
    </div>

    <div class="table-section">
        <table class="table table-striped">
            <thead class="thead-dark">
                <tr>
                    <th class="text-center">Radni dan</th>
                    <th class="text-center">Projekt</th>
                    <th class="text-center">Provedno vrijeme</th>
                    <th class="text-center">Komentar</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @if (projectTimeDtoTest == null)
                {
                    <tr>
                        <td class="text-center" colspan="5"><em>Loading...</em></td>
                    </tr>
                }
                else
                {
                    @foreach (var projectTimeLog in projectTimeDtoTest)
                    {
                        <tr>
                            <td class="text-center">@projectTimeLog.DateWorkDay</td>
                            <td class="text-center">@projectTimeLog.TitleProject</td>
                            <td class="text-center">@projectTimeLog.TimeSpentMinutes</td>
                            <td class="text-center">@projectTimeLog.Comment</td>
                            <td>
                                <button class="btn btn-info" @onclick="() => EditData(projectTimeLog)"><i class="far fa-edit"></i></button>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>

<style>
    .flex-container {
        display: flex;
        flex-direction: row;
        gap: 20px;
    }

    .form-section {
        flex: 1;
        max-width: 600px;
    }

    .table-section {
        flex: 2;
    }

    .input-group-horizontal {
        display: flex;
        align-items: center;
        gap: 20px;
    }

        .input-group-horizontal .form-group {
            flex: 1;
            margin: 0 8px;
        }

</style>

@code {
    public bool updateForm { get; set; }

    public ProjectTimeDtoTest? ProjectTimeLog { get; set; }

    private List<ProjectSmallDto>? projects;
    private ProjectTimeRequestDto projectTimeRequest = new ProjectTimeRequestDto();

    private List<ProjectTimeDtoTest>? projectTimeDtoTest;

    protected override async Task OnInitializedAsync()
    {
        projectTimeRequest.DateWorkDay = DateTime.Today;

        projects = await Http.GetFromJsonAsync<List<ProjectSmallDto>>("api/ProjectTimes/projects");

        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            string parameters = $"userWorkDay={projectTimeRequest.DateWorkDay:yyyy-MM-ddTHH:mm:ss}";
            projectTimeDtoTest = await Http.GetFromJsonAsync<List<ProjectTimeDtoTest>>("api/ProjectTimes?" + parameters);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error fetching projectTime: {ex.Message}");
        }
    }

    private void EditData(ProjectTimeDtoTest projectTimeLog)
    {
        ProjectTimeLog = projectTimeLog;
        //projectTimeRequest.DateWorkDay = new DateTime(projectTimeLog.DateWorkDay.Year, projectTimeLog.DateWorkDay.Month, projectTimeLog.DateWorkDay.Day);
        projectTimeRequest.TitleProject = projectTimeLog.TitleProject;
        projectTimeRequest.TimeSpentMinutes = projectTimeLog.TimeSpentMinutes;
        projectTimeRequest.Comment = projectTimeLog.Comment;

        updateForm = true;
    }

    private async void HandleDateInput(ChangeEventArgs args)
    {
        projectTimeRequest.DateWorkDay = Convert.ToDateTime(args.Value);

        await LoadData();
    }


    private async void ChangeDate(int change)
    {
        projectTimeRequest.DateWorkDay = projectTimeRequest.DateWorkDay.AddDays(change);

        await LoadData();
    }

    private void ClearForm()
    {
        projectTimeRequest = new ProjectTimeRequestDto();
        projectTimeRequest.DateWorkDay = DateTime.Today;
        projectTimeRequest.TimeSpentMinutes = 240;
    }

    private async Task Submit()
    {
        try
        {
            if (!updateForm)
            {
                var response = await Http.PostAsJsonAsync("api/ProjectTimes", projectTimeRequest);

                if (!response.IsSuccessStatusCode)
                {
                    throw new HttpRequestException($"Request failed with status code {response.StatusCode}");
                }
            }
            else
            {
                var response = await Http.PutAsJsonAsync("api/ProjectTimes" + ProjectTimeLog?.Id, projectTimeRequest);

                if (!response.IsSuccessStatusCode)
                {
                    throw new HttpRequestException($"Request failed with status code {response.StatusCode}");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception: {ex.Message}");
        }
    }
}
