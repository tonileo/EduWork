@page "/inputProjectTime/{date:datetime?}"

@using Common.DTO.ProjectTime
@using EduWork.UI.Components.ProjectTime
@using EduWork.UI.Shared

@inject HttpClient Http

<PageTitle>@INPUT_PROJECT_TIME_TITLE</PageTitle>

<div class="flex-container">
    <div class="form-section">

        <div class="form-container">
            <h3 class="mb-4">@INPUT_PROJECT_TIME_TITLE</h3>

            <EditForm EditContext="@editContext" OnValidSubmit="@Submit" class="@(updateForm ? "edit-mode" : "")">
                <DataAnnotationsValidator />
                <ValidationSummary class="alert alert-danger" />

                <div>
                    <div class="form-group mb-3">
                        <label for="date">@WORKDAY_INPUT_LABEL</label>

                        <div class="input-group">
                            <button type="button" id="subtractDateButton" @onclick="() => ChangeDate(-1)" class="chevron" disabled="@(updateForm)"><span><i class="fa fa-chevron-left"></i></span></button>
                            <InputDate id="date" @bind-Value="projectTimeRequest.DateWorkDay" @oninput="HandleDateInput" class="form-control" disabled="@(updateForm)" />
                            <button type="button" id="addDateButton" @onclick="() => ChangeDate(1)" class="chevron" disabled="@(updateForm)"><span><i class="fa fa-chevron-right"></i></span></button>
                        </div>

                        <ValidationMessage For="@(() => projectTimeRequest.DateWorkDay)" />
                    </div>

                    <div class="form-group mb-3">
                        <label for="titleProject">@PROJECT_INPUT_LABEL</label>
                        <InputSelect id="titleProject" @bind-Value="projectTimeRequest.TitleProject" class="form-control">
                            @if (projects == null)
                            {
                                <option>Loading...</option>
                            }
                            else
                            {
                                <option value="" disabled selected>@CHOOSE_PROJECT_SELECT_OPTION</option>
                                @foreach (var project in projects)
                                {
                                    <option value="@project.Title">@project.Title</option>
                                }
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => projectTimeRequest.TitleProject)" />
                    </div>
                </div>

                <div class="form-group mb-3">
                    <label for="comment">@COMMENT_INPUT_LABEL</label>
                    <InputTextArea id="comment" @bind-Value="projectTimeRequest.Comment" class="form-control" rows="5" />
                    <ValidationMessage For="@(() => projectTimeRequest.Comment)" />
                </div>

                <div class="form-group mb-3">
                    <div class="input-group-horizontal">
                        <div>
                            <label for="timeSpentHours">@HOURS_INPUT_LABEL</label>
                            <InputNumber id="timeSpentHours" @bind-Value="hours" class="form-control" min="0" required @oninput="UpdateTime" />
                        </div>

                        <div>
                            <label for="timeSpentMinutes">@MINUTES_INPUT_LABEL</label>
                            <InputNumber id="timeSpentMinutes" @bind-Value="minutes" class="form-control" min="0" max="59" required @oninput="UpdateTime" />
                        </div>

                        <div class="range-container">
                            <label for="timeSpentMinutesRange"></label>
                            <input type="range" id="timeSpentMinutesRange" @bind="rangeValue" @oninput="UpdateTimeFromRange" class="form-range" min="1" max="480" step="1" />
                        </div>
                    </div>
                    <ValidationMessage For="@(() => projectTimeRequest.TimeSpentMinutes)" />
                </div>

                <div class="form-group">
                    <button type="submit" class="btn btn-primary me-2">@SUBMIT_BUTTON_TEXT</button>
                    <button type="button" class="btn btn-secondary" @onclick="ClearForm">@CLEAR_BUTTON_TEXT</button>
                </div>
            </EditForm>
        </div>
    </div>

    <div class="table-section">
        <table class="table table-striped">
            <thead class="thead-dark">
                <tr>
                    <th class="text-center">@WORKDAY_TABLE_LABEL</th>
                    <th class="text-center">@PROJECT_TABLE_LABEL</th>
                    <th class="text-center">@TIME_SPENT_TABLE_LABEL</th>
                    <th class="text-center">@COMMENT_TABLE_LABEL</th>
                    <th class="text-center">@ACTIONS_TABLE_LABEL</th>
                </tr>
            </thead>
            <tbody>
                @if (projectTimeDtoTest == null)
                {
                    <tr>
                        <td class="text-center" colspan="5"><em>Loading...</em></td>
                    </tr>
                }
                else if (!projectTimeDtoTest.Any())
                {
                    <tr>
                        <td class="text-center" colspan="5"><em>@NO_DATA_FOR_THIS_DAY</em></td>
                    </tr>
                }
                else
                {
                    @foreach (var projectTimeLog in projectTimeDtoTest)
                    {
                        <tr>
                            <td class="text-center">@projectTimeLog.DateWorkDay</td>
                            <td class="text-center">@projectTimeLog.TitleProject</td>
                            <td class="text-center">@projectTimeLog.TimeSpentMinutes</td>
                            <td class="text-center">@projectTimeLog.Comment</td>
                            <td class="text-center">
                                <button class="btn btn-info" @onclick="() => EditData(projectTimeLog)"><i class="far fa-edit"></i></button>
                                <button class="btn btn-danger" @onclick="() => DeleteData(projectTimeLog.Id)"><i class="fas fa-trash-alt"></i></button>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    private const string INPUT_PROJECT_TIME_TITLE = "Unos projektnog vremena";
    private const string WORKDAY_INPUT_LABEL = "Radni dan: ";
    private const string PROJECT_INPUT_LABEL = "Projekt: ";
    private const string CHOOSE_PROJECT_SELECT_OPTION = "-- Odaberi projekt --";
    private const string COMMENT_INPUT_LABEL = "Komentar: ";
    private const string HOURS_INPUT_LABEL = "Sati: ";
    private const string MINUTES_INPUT_LABEL = "Minute: ";
    private const string SUBMIT_BUTTON_TEXT = "Podnesi";
    private const string CLEAR_BUTTON_TEXT = "Očisti";
    private const string WORKDAY_TABLE_LABEL = "Radni dan";
    private const string PROJECT_TABLE_LABEL = "Projekt";
    private const string TIME_SPENT_TABLE_LABEL = "Provedno vrijeme";
    private const string COMMENT_TABLE_LABEL = "Komentar";
    private const string ACTIONS_TABLE_LABEL = "Akcije";
    private const string NO_DATA_FOR_THIS_DAY = "Nema zapisa za ovaj dan";

    private const string GET_ENDPOINT = "api/ProjectTimes?";
    private const string DELETE_AND_PUT_ENDPOINT = "api/ProjectTimes/";
    private const string POST_ENDPOINT = "api/ProjectTimes";
    private const string GET_PROJECTS_ENDPOINT = "api/ProjectTimes/projects";
    private const string DATE_FORMAT = "yyyy-MM-ddTHH:mm:ss";

    [Parameter]
    public DateTime? date { get; set; }

    public bool updateForm { get; set; }

    public ProjectTimeDtoTest? ProjectTimeLog { get; set; }

    private List<ProjectSmallDto>? projects;

    public ProjectTimeRequestDto projectTimeRequest = new ProjectTimeRequestDto();

    private List<ProjectTimeDtoTest>? projectTimeDtoTest;

    private EditContext? editContext;

    private int hours;

    private int minutes;

    private int rangeValue
    {
        get => (hours * 60) + minutes;
        set
        {
            hours = value / 60;
            minutes = value % 60;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!date.HasValue)
        {
            date = DateTime.Today;
        }

        projectTimeRequest.DateWorkDay = date.Value;

        await LoadData();
    }

    protected override async Task OnInitializedAsync()
    {
        editContext = new EditContext(projectTimeRequest);

        projectTimeRequest.TimeSpentMinutes = 450;
        hours = projectTimeRequest.TimeSpentMinutes / 60;
        minutes = projectTimeRequest.TimeSpentMinutes % 60;

        projects = await Http.GetFromJsonAsync<List<ProjectSmallDto>>(GET_PROJECTS_ENDPOINT);

        projectTimeRequest.TitleProject = projects?[0].LastChosenTitle;
    }

    private async Task LoadData()
    {
        try
        {
            string parameters = $"userWorkDay={projectTimeRequest.DateWorkDay.ToString(DATE_FORMAT)}";
            projectTimeDtoTest = await Http.GetFromJsonAsync<List<ProjectTimeDtoTest>>(GET_ENDPOINT + parameters);

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error fetching projectTime: {ex.Message}");
        }
    }

    private void EditData(ProjectTimeDtoTest projectTimeLog)
    {
        ProjectTimeLog = projectTimeLog;
        projectTimeRequest.TitleProject = projectTimeLog.TitleProject;
        projectTimeRequest.TimeSpentMinutes = projectTimeLog.TimeSpentMinutes;
        projectTimeRequest.Comment = projectTimeLog.Comment;

        hours = projectTimeLog.TimeSpentMinutes / 60;
        minutes = projectTimeLog.TimeSpentMinutes % 60;

        updateForm = true;
    }

    private async void DeleteData(int deleteId)
    {
        var projectTimeDelete = await Http.DeleteAsync($"{DELETE_AND_PUT_ENDPOINT}{deleteId}");

        await LoadData();
    }

    private async void HandleDateInput(ChangeEventArgs args)
    {
        if (args.Value != null)
        {
            projectTimeRequest.DateWorkDay = Convert.ToDateTime(args.Value);

            await LoadData();
        }
    }

    private void UpdateTime()
    {
        projectTimeRequest.TimeSpentMinutes = (hours * 60) + minutes;
    }

    private void UpdateTimeFromRange(ChangeEventArgs args)
    {
        rangeValue = Convert.ToInt32(args.Value);
        projectTimeRequest.TimeSpentMinutes = rangeValue;
    }

    private async void ChangeDate(int change)
    {
        if (projectTimeRequest.DateWorkDay < DateTime.Today || (projectTimeRequest.DateWorkDay == DateTime.Today && change < 0))
        {
            projectTimeRequest.DateWorkDay = projectTimeRequest.DateWorkDay.AddDays(change);

            editContext.NotifyFieldChanged(FieldIdentifier.Create(() => projectTimeRequest.DateWorkDay));

            await LoadData();
        }
    }

    private async void ClearForm()
    {
        updateForm = false;

        projectTimeRequest = new ProjectTimeRequestDto();
        projectTimeRequest.DateWorkDay = DateTime.Today;
        hours = 7;
        minutes = 30;

        await LoadData();
    }

    private async Task Submit()
    {
        try
        {
            projectTimeRequest.TimeSpentMinutes = (hours * 60) + minutes;

            if (!updateForm)
            {
                var response = await Http.PostAsJsonAsync(POST_ENDPOINT, projectTimeRequest);

                if (!response.IsSuccessStatusCode)
                {
                    throw new HttpRequestException($"Request failed with status code {response.StatusCode}");
                }
            }
            else
            {
                var response = await Http.PutAsJsonAsync(DELETE_AND_PUT_ENDPOINT + ProjectTimeLog?.Id, projectTimeRequest);

                if (!response.IsSuccessStatusCode)
                {
                    throw new HttpRequestException($"Request failed with status code {response.StatusCode}");
                }

                updateForm = false;

                ClearForm();
            }
            await LoadData();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception: {ex.Message}");
        }
    }
}