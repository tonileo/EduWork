@page "/inputProjectTime"

@using Common.DTO

@inject HttpClient Http

<PageTitle>Input Project Time</PageTitle>

<h1>Input Project Time</h1>

<br />

<EditForm Model="@projectTimeRequestDto" OnValidSubmit="@Submit">
    <DataAnnotationsValidator />
    <ValidationSummary />


    <div class="form-group">
        <label for="titleProject">Projekt:</label>
        <select id="titleProject" @bind="projectTimeRequestDto.TitleProject" class="form-control" required>
            @if (projects == null)
            {
                <option>Loading...</option>
            }
            else
            {
                <option value="">-- Odaberi projekt --</option>
                @foreach (var project in projects)
                {
                    <option value="@project.Title">@project.Title</option>
                }
            }
        </select>
    </div>

    <div class="form-group">
        <label for="date">Datum:</label>
        @* <InputDate TValue="DateTime"  @bind-Value="date3" EnableMinMax="true" Min="@min3" Max="@max3" /> *@
        <InputDate Type="InputDateType.Date" @bind-Value="projectTimeRequestDto.DateWorkDay" />
    </div>

    <div class="form-group">
        <label for="comment">Komentar:</label>
        <textarea id="comment" @bind="projectTimeRequestDto.Comment" class="form-control" rows="5" required></textarea>
    </div>

    <div class="form-group">
        <label for="timeSpentMinutes">Vrijeme provedeno na projektu (minute):</label>
        <input type="number" id="timeSpentMinutes" @bind="projectTimeRequestDto.TimeSpentMinutes" class="form-control" min="0" required>
    </div>

    <br />

    <div class="form-group">
        <button type="submit" class="btn btn-primary">Submit</button>
        <button type="button" class="btn btn-secondary" @onclick="ClearForm">Clear Form</button>
    </div>
</EditForm>

@code {

    // private DateTime date = DateTime.Now.AddMonths(3);
    // private DateTime min = DateTime.Now.AddMonths(-1);
    // private DateTime max = DateTime.Now.AddYears(1);
    // private DateTime date3, min3, max3;


    private List<ProjectSmallDto>? projects;
    private ProjectTimeRequestDto projectTimeRequestDto = new ProjectTimeRequestDto();

    protected override async Task OnInitializedAsync()
    {
        projects = await Http.GetFromJsonAsync<List<ProjectSmallDto>>("api/ProjectTimes/projects");

        projectTimeRequestDto.DateWorkDay = DateTime.Today;

        // date3 = DateTime.Now.AddMonths(3);
        // min3 = min;
        // max3 = max;
    }

    private void ClearForm()
    {
        projectTimeRequestDto = new ProjectTimeRequestDto();
    }

    private async Task Submit()
    {
        try
        {
            if (projectTimeRequestDto.DateWorkDay > DateTime.Today)
            {
                Console.WriteLine($"You can't add Project Time in future");
                return;
            }

            var response = await Http.PostAsJsonAsync("api/ProjectTimes", projectTimeRequestDto);

            if (!response.IsSuccessStatusCode)
            {
                throw new HttpRequestException($"Request failed with status code {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception: {ex.Message}");
        }
    }
}
