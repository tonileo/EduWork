@page "/inputProjectTime/{date:datetime?}"

@using Common.DTO.ProjectTime
@using EduWork.UI.Components.ProjectTime
@using EduWork.UI.Shared

@inject HttpClient Http

<PageTitle>@INPUT_PROJECT_TIME_TITLE</PageTitle>

<div class="flex-container">
    <div class="form-section">

        <EditForm EditContext="@editContext" OnValidSubmit="@Submit" class="@(updateForm ? "edit-mode" : "")">
            <DataAnnotationsValidator />
            <ValidationSummary class="alert alert-danger" />

            <div class="form-group mb-3 d-flex">
                <div class="workdayFlex">
                    <label for="date">@WORKDAY_INPUT_LABEL</label>

                    <div class="input-group">
                        <button type="button" id="subtractDateButton" @onclick="() => ChangeDate(-1)" disabled="@(updateForm)"><span><i class="bi bi-caret-left-fill"></i></span></button>
                        <InputDate id="date" @bind-Value="projectTimeRequest.DateWorkDay" @oninput="HandleDateInput" class="form-control" disabled="@(updateForm)" />
                        <button type="button" id="addDateButton" @onclick="() => ChangeDate(1)" disabled="@(updateForm)"><span><i class="bi bi-caret-right-fill"></i></span></button>
                    </div>

                    <ValidationMessage For="@(() => projectTimeRequest.DateWorkDay)" />
                </div>

                <div class="projectFlex">
                    <label for="titleProject">@PROJECT_INPUT_LABEL</label>
                    <InputSelect id="titleProject" @bind-Value="projectTimeRequest.TitleProject" class="form-control">
                        @if (projects == null)
                        {
                            <option>@LOADING_LABEL</option>
                        }
                        else
                        {
                            <option value="" disabled selected>@CHOOSE_PROJECT_SELECT_OPTION</option>
                            @foreach (var project in projects)
                            {
                                <option value="@project.Title">@project.Title</option>
                            }
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => projectTimeRequest.TitleProject)" />
                </div>

            </div>

            <div class="form-group mb-3">
                <label for="comment">@COMMENT_INPUT_LABEL</label>
                <InputTextArea id="comment" @bind-Value="projectTimeRequest.Comment" class="form-control" rows="5" />
                <ValidationMessage For="@(() => projectTimeRequest.Comment)" />
            </div>

            <div class="form-group mb-3">
                <div class="input-group-horizontal">
                    <div>
                        <label for="timeSpentHours">@HOURS_INPUT_LABEL</label>
                        <InputNumber id="timeSpentHours" @bind-Value="hours" class="form-control" min="0" required @oninput="UpdateTime" />
                    </div>

                    <div>
                        <label for="timeSpentMinutes">@MINUTES_INPUT_LABEL</label>
                        <InputNumber id="timeSpentMinutes" @bind-Value="minutes" class="form-control" min="0" max="59" required @oninput="UpdateTime" />
                    </div>

                    <div class="range-container">
                        <label for="timeSpentMinutesRange"></label>
                        <input type="range" id="timeSpentMinutesRange" @bind="rangeValue" @oninput="UpdateTimeFromRange" class="form-range" min="1" max="480" step="1" />
                    </div>
                </div>
                <ValidationMessage For="@(() => projectTimeRequest.TimeSpentMinutes)" />
            </div>

            <div class="form-group">
                <button type="submit" class="btn btn-primary me-2">@SUBMIT_BUTTON_TEXT</button>
                <button type="button" class="btn btn-secondary" @onclick="ClearForm">@CLEAR_BUTTON_TEXT</button>
            </div>
        </EditForm>
    </div>

    <div class="table-section">

        <div>
            @if (InputProjectTimeResponseDto == null)
            {
                <span>@LOADING_LABEL</span>
            }
            else if (InputProjectTimeResponseDto.SumTimeSpentMinutes == 0 && InputProjectTimeResponseDto.SumTimeSpentHours == 0)
            {
                <div class="summary-container">
                    <div class="progress">
                        <div class="progress-bar bg-danger" role="progressbar" aria-valuenow="100"
                             aria-valuemin="0" aria-valuemax="100" style="width:100%">
                            0% Complete
                        </div>
                    </div>

                    <div class="divSumOfTimeSpent">
                        <span class="spanSumOfTimeSpent">
                            <label class="labelSumOfTimeSpent">@SUM_TIME_SPENT</label>
                            <span>@NO_DATA_FOR_THIS_DAY</span>
                        </span>
                    </div>
                </div>
            }
            else
            {
                var (progressClass, progressPercentage) = GetRowColor(InputProjectTimeResponseDto.SumTimeSpentHours, InputProjectTimeResponseDto.SumTimeSpentMinutes);

                <div class="summary-container">
                    <div class="progress">
                        <div class="progress-bar @progressClass" role="progressbar" aria-valuenow="100"
                             aria-valuemin="0" aria-valuemax="100" style="width:@progressPercentage%">
                            @progressPercentage% Complete
                        </div>
                    </div>

                    <div class="divSumOfTimeSpent">
                        <span class="spanSumOfTimeSpent">
                            <label class="labelSumOfTimeSpent">@SUM_TIME_SPENT</label>
                            <span>@InputProjectTimeResponseDto.SumTimeSpentHours</span> h : <span>@InputProjectTimeResponseDto.SumTimeSpentMinutes</span> min
                        </span>
                    </div>


                    <div class="divSumOfTimeSpent">
                        @if (overtime == null)
                        {
                            <span class="spanSumOfTimeSpent">@LOADING_LABEL</span>
                        }
                        else
                        {
                            <span class="spanSumOfTimeSpent">
                                <label class="labelSumOfTimeSpent">@LABEL_OVERTIME</label>
                                <span>@overtime.OvertimeHours</span> h : <span>@overtime.OvertimeMinutes</span> min
                            </span>
                        }
                    </div>
                </div>
            }
        </div>

        <InputProjectTimeTableComponent projectTimeTableData="InputProjectTimeResponseDto?.InputProjectTimeDto" OnLoadData="LoadData" OnEditData="EditData" />
    </div>
</div>

@code {
    private const string INPUT_PROJECT_TIME_TITLE = "Unos projektnog vremena";
    private const string WORKDAY_INPUT_LABEL = "Radni dan: ";
    private const string PROJECT_INPUT_LABEL = "Projekt: ";
    private const string CHOOSE_PROJECT_SELECT_OPTION = "-- Odaberi projekt --";
    private const string COMMENT_INPUT_LABEL = "Komentar: ";
    private const string HOURS_INPUT_LABEL = "Sati: ";
    private const string MINUTES_INPUT_LABEL = "Minute: ";
    private const string SUBMIT_BUTTON_TEXT = "Podnesi";
    private const string CLEAR_BUTTON_TEXT = "Očisti";
    private const string NO_DATA_FOR_THIS_DAY = "Nema zapisa za ovaj dan";
    private const string SUM_TIME_SPENT = "Ukupno: ";
    private const string LABEL_OVERTIME = " Prekovremeno: ";
    private const string LOADING_LABEL = " Učitavanje podataka...";

    private const string GET_ENDPOINT = "api/ProjectTimes?";
    private const string POST_ENDPOINT = "api/ProjectTimes";
    private const string GET_PROJECTS_ENDPOINT = "api/ProjectTimes/projects";
    private const string PUT_ENDPOINT = "api/ProjectTimes/";
    private const string DATE_FORMAT = "yyyy-MM-ddTHH:mm:ss";
    private const string ZERO_HOURS_COLOR = "lightcoral";
    private const string BETWEEN_ZERO_AND_FULL_TIME_COLOR = "lightgoldenrodyellow";
    private const string FULL_TIME_COLOR = "lightgreen";

    [Parameter]
    public DateTime? date { get; set; }

    public bool updateForm { get; set; }

    public InputProjectTimeDto? ProjectTimeLog { get; set; }
    private InputProjectTimeResponseDto? InputProjectTimeResponseDto;

    private List<ProjectSmallDto>? projects;

    public ProjectTimeRequestDto projectTimeRequest = new ProjectTimeRequestDto();

    public OvertimeDto? overtime;

    private EditContext? editContext;

    private int hours;
    private int minutes;

    private int rangeValue
    {
        get => (hours * 60) + minutes;
        set
        {
            hours = value / 60;
            minutes = value % 60;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!date.HasValue)
        {
            date = DateTime.Today;
        }

        projectTimeRequest.DateWorkDay = date.Value;

        await LoadData();
    }

    protected override async Task OnInitializedAsync()
    {
        if (DateTime.Today.DayOfWeek == DayOfWeek.Saturday || DateTime.Today.DayOfWeek == DayOfWeek.Sunday)
        {
            InputProjectTimeResponseDto.InputProjectTimeDto = [];
        }
        editContext = new EditContext(projectTimeRequest);

        projectTimeRequest.TimeSpentMinutes = 450;
        hours = projectTimeRequest.TimeSpentMinutes / 60;
        minutes = projectTimeRequest.TimeSpentMinutes % 60;

        projects = await Http.GetFromJsonAsync<List<ProjectSmallDto>>(GET_PROJECTS_ENDPOINT);

        overtime = await Http.GetFromJsonAsync<OvertimeDto>("api/ProjectTimes/overtime");

        projectTimeRequest.TitleProject = projects?[0].LastChosenTitle;
    }

    private async Task LoadData()
    {
        if (projectTimeRequest.DateWorkDay.DayOfWeek == DayOfWeek.Saturday || projectTimeRequest.DateWorkDay.DayOfWeek == DayOfWeek.Sunday)
        {
            InputProjectTimeResponseDto.InputProjectTimeDto = [];
        }
        else
        {
            try
            {
                string parameters = $"userWorkDay={projectTimeRequest.DateWorkDay.ToString(DATE_FORMAT)}";
                InputProjectTimeResponseDto = await Http.GetFromJsonAsync<InputProjectTimeResponseDto>(GET_ENDPOINT + parameters);

                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error fetching projectTime: {ex.Message}");
            }
        }
    }

    private void EditData(InputProjectTimeDto projectTimeLog)
    {
        ProjectTimeLog = projectTimeLog;
        projectTimeRequest.TitleProject = projectTimeLog.TitleProject;
        projectTimeRequest.TimeSpentMinutes = projectTimeLog.TimeSpentMinutes;
        projectTimeRequest.Comment = projectTimeLog.Comment;

        hours = projectTimeLog.TimeSpentMinutes / 60;
        minutes = projectTimeLog.TimeSpentMinutes % 60;

        updateForm = true;
    }

    private async void HandleDateInput(ChangeEventArgs args)
    {
        if (args.Value != null)
        {
            projectTimeRequest.DateWorkDay = Convert.ToDateTime(args.Value);

            editContext?.NotifyFieldChanged(FieldIdentifier.Create(() => projectTimeRequest.DateWorkDay));

            if (projectTimeRequest.DateWorkDay.DayOfWeek != DayOfWeek.Saturday & projectTimeRequest.DateWorkDay.DayOfWeek != DayOfWeek.Sunday & projectTimeRequest.DateWorkDay < DateTime.Today)
            {
                await LoadData();
            }
        }
    }

    private void UpdateTime()
    {
        projectTimeRequest.TimeSpentMinutes = (hours * 60) + minutes;
    }

    private void UpdateTimeFromRange(ChangeEventArgs args)
    {
        rangeValue = Convert.ToInt32(args.Value);
        projectTimeRequest.TimeSpentMinutes = rangeValue;
    }

    private async void ChangeDate(int change)
    {
        if (projectTimeRequest.DateWorkDay < DateTime.Today || (projectTimeRequest.DateWorkDay == DateTime.Today && change < 0))
        {
            projectTimeRequest.DateWorkDay = projectTimeRequest.DateWorkDay.AddDays(change);

            editContext?.NotifyFieldChanged(FieldIdentifier.Create(() => projectTimeRequest.DateWorkDay));

            await LoadData();
        }
    }

    private (string color, int percentage) GetRowColor(int hours, int minutes)
    {
        var totalMinutes = hours * 60 + minutes;

        if (totalMinutes >= 480)
        {
            return ("bg-success", 100);
        }
        else
        {
            int percentage = (totalMinutes * 100) / 480;
            return ("bg-warning", percentage);
        }
    }


    private async void ClearForm()
    {
        updateForm = false;

        projectTimeRequest = new ProjectTimeRequestDto();
        projectTimeRequest.DateWorkDay = DateTime.Today;
        hours = 7;
        minutes = 30;

        await LoadData();
    }

    private async Task Submit()
    {
        try
        {
            projectTimeRequest.TimeSpentMinutes = (hours * 60) + minutes;

            if (!updateForm)
            {
                var response = await Http.PostAsJsonAsync(POST_ENDPOINT, projectTimeRequest);

                if (!response.IsSuccessStatusCode)
                {
                    throw new HttpRequestException($"Request failed with status code {response.StatusCode}");
                }
            }
            else
            {
                var response = await Http.PutAsJsonAsync(PUT_ENDPOINT + ProjectTimeLog?.Id, projectTimeRequest);

                if (!response.IsSuccessStatusCode)
                {
                    throw new HttpRequestException($"Request failed with status code {response.StatusCode}");
                }

                updateForm = false;

                ClearForm();
            }
            await LoadData();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception: {ex.Message}");
        }
    }
}