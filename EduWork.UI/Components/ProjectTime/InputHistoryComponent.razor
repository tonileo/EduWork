@using Common.DTO
@using Common.DTO.ProjectTime

@inject NavigationManager NavigationManager
@inject HttpClient Http

<PageTitle>Povijest unosa</PageTitle>

@if (haveUsername)
{
    <div class="flex-container">
        <h3>@INPUT_HISTORY_OF_USER_TITLE</h3>

        @if (usernames == null)
        {
            <option>Loading...</option>
        }
        else
        {
            <InputSelect class="form-control fixed-size" @bind-Value="filterUsername" id="username" @oninput="FilterUser">
                @foreach (var user in usernames)
                {
                    <option value="@user.Username">@user.Username</option>
                }
            </InputSelect>
        }
    </div>
}
else
{
    <h3>@MY_INPUT_HISTORY_TITLE</h3>
}

<div class="filter">
    <button type="button" class="btn @(selectedDateFilter == 1 ? "btn-primary" : "btn-secondary")" @onclick="() => FilterDate(1)">@LAST_MONTH_BUTTON_TEXT</button>
    <button type="button" class="btn @(selectedDateFilter == 2 ? "btn-primary" : "btn-secondary")" @onclick="() => FilterDate(2)">@CURRENT_MONTH_BUTTON_TEXT</button>
    <button type="button" class="btn @(selectedDateFilter == 3 ? "btn-primary" : "btn-secondary")" @onclick="() => FilterDate(3)">@CURRENT_QUARTER_BUTTON_TEXT</button>
</div>

<div class="row">
    <table class="table">
        <thead class="thead-dark">
            <tr>
                <th class="text-center">@WORKDAY_TABLE_LABEL</th>
                <th class="text-center">@PROJECT_TABLE_LABEL</th>
                <th class="text-center">@TIME_SPENT_TABLE_LABEL</th>
                <th class="text-center">@COMMENT_TABLE_LABEL</th>
                <th class="text-center">@SUM_OF_TIME_SPENT_TABLE_LABEL</th>
            </tr>
        </thead>
        <tbody>
            @if (projectTimeHistoryDto == null)
            {
                <tr>
                    <td class="text-center"><em>Loading...</em></td>
                </tr>
            }
            else
            {
                @foreach (var projectTimeLog in projectTimeHistoryDto)
                {
                    <tr style="background-color:@(GetRowColor(projectTimeLog.SumTimeSpentHours, projectTimeLog.SumTimeSpentMinutes, projectTimeLog.IsNonWorkingDay))" @onclick="() => ToggleRow(projectTimeLog)">
                        <td class="text-center">
                            @if (projectTimeLog.IsNonWorkingDay)
                            {
                                @projectTimeLog.DateWorkDay
                            }
                            else
                            {
                                <a href="@(@INPUT_PROJECT_TIME_NAVIGATION + projectTimeLog.DateWorkDay.ToString("MM-dd-yyyy"))">
                                    @projectTimeLog.DateWorkDay
                                </a>
                            }
                        </td>
                        <td class="text-center">@projectTimeLog.TitleProject</td>
                        <td class="text-center">
                            <span>@projectTimeLog.Hours</span> h :
                            <span>@projectTimeLog.Minutes</span> min
                        </td>
                        <td class="text-center">@projectTimeLog.Comment</td>
                        <td class="text-center">
                            <span>@projectTimeLog.SumTimeSpentHours</span> h :
                            <span>@projectTimeLog.SumTimeSpentMinutes</span> min
                        </td>

                    </tr>

                    @if (expandedRow == projectTimeLog)
                    {
                        <tr>
                            <td colspan="5">
                                <div class="expanded-content">
                                    <p>Details for @projectTimeLog.DateWorkDay:</p>
                                    <ul>
                                        <li>Additional Detail 1</li>
                                        <li>Additional Detail 2</li>
                                    </ul>
                                </div>
                            </td>
                        </tr>
                    }
                }
            }
        </tbody>
    </table>
</div>

@code {
    private const string INPUT_HISTORY_OF_USER_TITLE = "Povijest unosa korisnika: ";
    private const string MY_INPUT_HISTORY_TITLE = "Moja povijest unosa";
    private const string LAST_MONTH_BUTTON_TEXT = "Prošli mjesec";
    private const string CURRENT_MONTH_BUTTON_TEXT = "Trenutni mjesec";
    private const string CURRENT_QUARTER_BUTTON_TEXT = "Trenutno tromjesečje";
    private const string WORKDAY_TABLE_LABEL = "Radni dan";
    private const string PROJECT_TABLE_LABEL = "Projekt";
    private const string TIME_SPENT_TABLE_LABEL = "Provedno vrijeme";
    private const string COMMENT_TABLE_LABEL = "Komentar";
    private const string SUM_OF_TIME_SPENT_TABLE_LABEL = "Ukupno provedno vremena";
    private const string INPUT_PROJECT_TIME_NAVIGATION = "/inputProjectTime/";

    private const string GET_USERNAMES_ENDPOINT = "api/ProjectTimes/usernames";
    private const string LAST_MONTH_PARAMS = "?lastMonth=true";
    private const string THIS_MONTH_PARAMS = "?thisMonth=true";
    private const string THIS_QUARTER_PARAMS = "?thisQuarter=true";
    private const string NON_WORKING_DAY_COLOR = "lightgray";
    private const string ZERO_HOURS_COLOR = "lightcoral";
    private const string BETWEEN_ZERO_AND_FULL_TIME_COLOR = "lightgoldenrodyellow";
    private const string FULL_TIME_COLOR = "lightgreen";

    [Parameter]
    public string? ApiEndpoint { get; set; }

    [Parameter]
    public bool haveUsername { get; set; }

    private List<UsernamesDto>? usernames;

    private List<ProjectTimeHistoryDto>? projectTimeHistoryDto;
    private ProjectTimeDtoTest? selectedProjectTime; //testing
    private ProjectTimeDtoTest? openedProjectTime; //testing
    private ProjectTimeHistoryDto? expandedRow;

    private int selectedDateFilter = 2;
    private string filterUsername = string.Empty;
    private string parameters = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        if (haveUsername)
        {
            usernames = await Http.GetFromJsonAsync<List<UsernamesDto>>(GET_USERNAMES_ENDPOINT);

            filterUsername = usernames.First().Username;

            parameters = $"?username={filterUsername}";
        }

        parameters = parameters + "";

        await LoadData(parameters);
    }

    private async Task LoadData(string parameters)
    {
        try
        {
            if (haveUsername)
            {
                projectTimeHistoryDto = await Http.GetFromJsonAsync<List<ProjectTimeHistoryDto>>($"{ApiEndpoint}{parameters}");
            }
            else
            {
                projectTimeHistoryDto = await Http.GetFromJsonAsync<List<ProjectTimeHistoryDto>>($"{ApiEndpoint}{parameters}");
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error fetching projectTime: {ex.Message}");
        }

        StateHasChanged();
    }

    private async void FilterDate(int filterDate)
    {
        selectedDateFilter = filterDate;
        parameters = string.Empty;

        if (filterDate == 1)
        {
            parameters = LAST_MONTH_PARAMS;
        }
        else if (filterDate == 2)
        {
            parameters = THIS_MONTH_PARAMS;
        }
        else if (filterDate == 3)
        {
            parameters = THIS_QUARTER_PARAMS;
        }

        if (haveUsername)
        {
            parameters = parameters + $"&username={filterUsername}";
        }

        await LoadData(parameters);
    }

    private async void FilterUser(ChangeEventArgs e)
    {
        filterUsername = e.Value?.ToString() ?? string.Empty;
        parameters = $"?username={filterUsername}";

        await LoadData(parameters);
    }

    private void ToggleRow(ProjectTimeHistoryDto projectTimeLog)
    {
        if (expandedRow == projectTimeLog)
        {
            expandedRow = null;
        }
        else
        {
            expandedRow = projectTimeLog;
        }
    }

    private string GetRowColor(int hours, int minutes, bool isNonWorkingDay)
    {
        var totalMinutes = hours * 60 + minutes;

        if (isNonWorkingDay)
        {
            return NON_WORKING_DAY_COLOR;
        }
        else if (totalMinutes == 0)
        {
            return ZERO_HOURS_COLOR;
        }
        else if (totalMinutes >= 480)
        {
            return FULL_TIME_COLOR;
        }
        else
        {
            return BETWEEN_ZERO_AND_FULL_TIME_COLOR;
        }
    }
}
