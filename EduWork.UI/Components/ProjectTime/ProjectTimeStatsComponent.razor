@using Common.DTO
@using Common.DTO.ProjectTime
@using EduWork.UI.Interop
@using EduWork.UI.Shared

@inject HttpClient Http

<ProjectTimeStatsFormComponent FilterModel="filterModel" OnValidSubmit="LoadProjectTimesAsync"></ProjectTimeStatsFormComponent>

<br>
<div class="row">
    <div class="col-md-6">

        @if (projectTimeResponse?.ProjectTimeSums == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <table class="table @(isAdmin ? string.Empty : "table-striped")">
                <thead>
                    <tr>
                        <th>@PROJECT_TABLE_LABEL </th>
                        <th style="text-align: right;">@DURATION_LABEL </th>
                    </tr>
                </thead>

                <tbody>
                    @foreach (var sum in projectTimeResponse.ProjectTimeSums.OrderByDescending(p => p.PercentageTimeSpent))
                    {
                        <tr class="@GetRowClass(sum.IsEducation, sum.IsFinished)">
                            <td>
                                @if (isAdmin)
                                {
                                    @if (!sum.IsPayable)
                                    {
                                        <span class="legend-circle" style="background-color: red;"></span>
                                    }
                                    else
                                    {
                                        <span class="legend-circle" style="background-color: forestgreen;"></span>
                                    }
                                }
                                else
                                {
                                    @if (sum.IsEducation)
                                    {
                                        <span class="legend-circle" style="background-color: #2196F3;"></span>
                                    }
                                    else
                                    {
                                        <span class="legend-circle" style="background-color: black;"></span>
                                    }
                                }
                                @sum.TitleProject
                            </td>
                            <td style="text-align: right;"><span>@sum.SumTimeSpentHours</span>h : <span>@sum.SumTimeSpentMinutes</span>min</td>
                        </tr>
                    }
                    <tr>
                        <td><strong>@IN_TOTAL_LABEL </strong></td>
                        <td style="text-align: right;">
                            <strong><span>@projectTimeResponse.SumAllProjectTimesHours</span>h : <span>@projectTimeResponse.SumAllProjectTimesMinutes</span>min</strong>
                        </td>
                    </tr>
                </tbody>
            </table>

            <div style="margin-top: 20px;">
                <ul style="list-style-type: none; padding: 0;">
                    @if (isAdmin)
                    {
                        <li style="display: inline-block; margin-right: 15px;">
                            <span class="legend-circle" style="background-color: red;"></span>
                            <span>@NOT_PAYED_LEGEND</span>
                        </li>

                        <li style="display: inline-block; margin-right: 15px;">
                            <span class="legend-circle" style="background-color: forestgreen;"></span>
                            <span>@PAYED_LEGEND </span>
                        </li>
                    }
                    <li style="display: inline-block; margin-right: 15px;">
                        <span class="legend-circle" style="background-color: #2196F3;"></span>
                        <span>@EDUCATION_LEGEND</span>
                    </li>

                    <li style="display: inline-block; margin-right: 15px;">
                        <span class="legend-circle" style="background-color: #757575;"></span>
                        <span>@FINISHED_LEGEND</span>
                    </li>
                </ul>
            </div>
        }
    </div>

    <div class="col-md-6" style="background-color: lightcyan; padding: 20px; border-radius: 8px; display: flex;
flex-direction: row; justify-content: space-between; height: 100%; margin-top: 20px;">

        @if (projectTimeResponse?.ProjectTimeSums != null)
        {
            <canvas id="myChart" style="margin-right: 40px; max-width: 300px; max-height: 300px;">
                <ChartComponent Labels="projectTimeResponse.ProjectTimeSums.Select(p => p.TitleProject).ToList()"
                                Data="projectTimeResponse.ProjectTimeSums.Select(p => p.PercentageTimeSpent).ToList()"
                                CanvasId="myChart" ChartType="doughnut"></ChartComponent>
            </canvas>
        }
        else
        {
            <p>Loading...</p>
        }

        <div>
            <div style="margin-bottom: 50px;">
                <p style="font-size: 18px; margin-bottom: 5px;">@TIME_SPENT_GRAPHIC_LABEL</p>
                <p style="font-size: 20px;">
                    <strong><span>@projectTimeResponse?.SumAllProjectTimesHours</span> h : <span>@projectTimeResponse?.SumAllProjectTimesMinutes</span> min</strong>
                </p>
            </div>
            @foreach (var percentageTime in projectTimeResponse?.ProjectTimeSums ?? Enumerable.Empty<ProjectTimeSumDto>())
            {
                <div style="display: inline-block; vertical-align: top; margin-right: 20px; border-radius: 8px; padding-right: 20px; box-shadow: 3px 3px 5px rgba(0,0,0,0.4);">
                    <p style="font-size: 24px; margin-bottom: 5px; margin-top: 0;">@percentageTime.PercentageTimeSpent%</p>
                    <strong><p style="font-size: 14px; margin-bottom: 5px; margin-top: 5px;">@percentageTime.TitleProject</p></strong>
                </div>
            }
        </div>
    </div>

</div>

@code {
    private const string PROJECT_TABLE_LABEL = "Projekt";
    private const string DURATION_LABEL = "Trajanje";
    private const string IN_TOTAL_LABEL = "Ukupno";
    private const string NOT_PAYED_LEGEND = "Ne plaćen";
    private const string PAYED_LEGEND = "Plaćen";
    private const string EDUCATION_LEGEND = "Edukacija";
    private const string FINISHED_LEGEND = "Završen";
    private const string TIME_SPENT_GRAPHIC_LABEL = "Provedno vremena: ";

    [Parameter]
    public string? ApiEndpoint { get; set; }

    [CascadingParameter]
    public bool isAdmin { get; set; }

    private ProjectTimeResponseDto? projectTimeResponse;

    private FilterModel filterModel = new FilterModel();

    protected override async Task OnInitializedAsync()
    {
        filterModel.FromDate = DateTime.Today.AddMonths(-1);

        filterModel.ToDate = DateTime.Today;

        await LoadProjectTimesAsync();
    }

    private async Task LoadProjectTimesAsync()
    {
        string parameters;

        string respondfromDate = $"fromDate={filterModel.FromDate:yyyy-MM-ddTHH:mm:ss}";
        string respondToDate = $"toDate={filterModel.ToDate:yyyy-MM-ddTHH:mm:ss}";

        if (isAdmin)
        {
            parameters = $"{respondfromDate}&{respondToDate}&username={filterModel.Username}&projectTitle={filterModel.ProjectTitle}";
        }
        else
        {
            parameters = $"{respondfromDate}&{respondToDate}&projectTitle={filterModel.ProjectTitle}";
        }

        projectTimeResponse = await Http.GetFromJsonAsync<ProjectTimeResponseDto>($"{ApiEndpoint}?{parameters}");
    }

    private string GetRowClass(bool isEducation, bool isFinished)
    {
        string rowClass = string.Empty;

        if (isAdmin == true)
        {
            if (isEducation)
            {
                rowClass += "education-row ";
            }
        }

        if (isFinished)
        {
            rowClass += "finished-row";
        }

        return rowClass.Trim();
    }
}