@using Common.DTO
@using Common.DTO.ProjectTime
@using EduWork.UI.Components.Interop

@inject HttpClient Http

<ProjectTimeStatsFormComponent FilterModel="filterModel" OnValidSubmit="LoadProjectTimesAsync"></ProjectTimeStatsFormComponent>

<br>
<div class="row">
    <div class="col-md-6">

        @if (projectTimeResponse?.ProjectTimeSums == null)
        {
            <p><em>@LOADING_LABEL</em></p>
        }
        else
        {
            <table class="table @(isAdmin ? string.Empty : "table-striped")">
                <thead>
                    <tr>
                        <th>@PROJECT_TABLE_LABEL </th>
                        <th class="alignRight">@DURATION_LABEL </th>
                    </tr>
                </thead>

                <tbody>
                    @foreach (var sum in projectTimeResponse.ProjectTimeSums.OrderByDescending(p => p.PercentageTimeSpent))
                    {
                        <tr class="@GetRowClass(sum.IsEducation, sum.IsFinished)">
                            <td>
                                @if (isAdmin)
                                {
                                    @if (!sum.IsPayable)
                                    {
                                        <span class="legend-circle red"></span>
                                    }
                                    else
                                    {
                                        <span class="legend-circle forestgreen"></span>
                                    }
                                }
                                else
                                {
                                    @if (sum.IsEducation)
                                    {
                                        <span class="legend-circle blue"></span>
                                    }
                                    else
                                    {
                                        <span class="legend-circle black"></span>
                                    }
                                }
                                @sum.TitleProject
                            </td>
                            <td class="alignRight"><span>@sum.SumTimeSpentHours</span>h : <span>@sum.SumTimeSpentMinutes</span>min</td>
                        </tr>
                    }
                    <tr>
                        <td><strong>@IN_TOTAL_LABEL </strong></td>
                        <td class="alignRight">
                            <strong><span>@projectTimeResponse.SumAllProjectTimesHours</span>h : <span>@projectTimeResponse.SumAllProjectTimesMinutes</span>min</strong>
                        </td>
                    </tr>
                </tbody>
            </table>

            <div id="legendDiv">
                <ul id="legendList">
                    @if (isAdmin)
                    {
                        <li class="legendItem">
                            <span class="legend-circle red"></span>
                            <span>@NOT_PAYED_LEGEND</span>
                        </li>

                        <li class="legendItem">
                            <span class="legend-circle forestgreen"></span>
                            <span>@PAYED_LEGEND </span>
                        </li>
                    }
                    <li class="legendItem">
                        <span class="legend-circle blue"></span>
                        <span>@EDUCATION_LEGEND</span>
                    </li>

                    <li class="legendItem">
                        <span class="legend-circle gray"></span>
                        <span>@FINISHED_LEGEND</span>
                    </li>
                </ul>
            </div>
        }
    </div>

    <div id = "graphicDiv" class="col-md-6">

        @if (projectTimeResponse?.ProjectTimeSums != null)
        {
            <canvas id="myChart">
                <ChartComponent Labels="projectTimeResponse.ProjectTimeSums.Select(p => p.TitleProject).ToList()"
                                Data="projectTimeResponse.ProjectTimeSums.Select(p => p.PercentageTimeSpent).ToList()"
                                CanvasId="myChart" ChartType="doughnut"></ChartComponent>
            </canvas>
        }
        else
        {
            <p>@LOADING_LABEL</p>
        }

        <div>
            <div id="timeSpentDiv">
                <p id="graphicLabel">@TIME_SPENT_GRAPHIC_LABEL</p>
                <p id="totalTimeP">
                    <strong><span>@projectTimeResponse?.SumAllProjectTimesHours</span> h : <span>@projectTimeResponse?.SumAllProjectTimesMinutes</span> min</strong>
                </p>
            </div>
            @foreach (var percentageTime in projectTimeResponse?.ProjectTimeSums ?? Enumerable.Empty<ProjectTimeSumDto>())
            {
                <div id="percentageTimeDiv">
                    <p id="percentageTimeP">@percentageTime.PercentageTimeSpent%</p>
                    <p id ="titleProjectP">@percentageTime.TitleProject</p>
                </div>
            }
        </div>
    </div>

</div>

@code {
    private const string PROJECT_TABLE_LABEL = "Projekt";
    private const string DURATION_LABEL = "Trajanje";
    private const string IN_TOTAL_LABEL = "Ukupno";
    private const string NOT_PAYED_LEGEND = "Ne plaćen";
    private const string PAYED_LEGEND = "Plaćen";
    private const string EDUCATION_LEGEND = "Edukacija";
    private const string FINISHED_LEGEND = "Završen";
    private const string TIME_SPENT_GRAPHIC_LABEL = "Provedno vremena: ";
    private const string LOADING_LABEL = " Učitavanje podataka...";

    [Parameter]
    public string? ApiEndpoint { get; set; }

    [CascadingParameter]
    public bool isAdmin { get; set; }

    private ProjectTimeResponseDto? projectTimeResponse;

    private FilterModel filterModel = new FilterModel();

    protected override async Task OnInitializedAsync()
    {
        filterModel.FromDate = DateTime.Today.AddMonths(-1);

        filterModel.ToDate = DateTime.Today;

        await LoadProjectTimesAsync();
    }

    private async Task LoadProjectTimesAsync()
    {
        string parameters;

        string respondfromDate = $"fromDate={filterModel.FromDate:yyyy-MM-ddTHH:mm:ss}";
        string respondToDate = $"toDate={filterModel.ToDate:yyyy-MM-ddTHH:mm:ss}";

        if (isAdmin)
        {
            parameters = $"{respondfromDate}&{respondToDate}&username={filterModel.Username}&projectTitle={filterModel.ProjectTitle}";
        }
        else
        {
            parameters = $"{respondfromDate}&{respondToDate}&projectTitle={filterModel.ProjectTitle}";
        }

        projectTimeResponse = await Http.GetFromJsonAsync<ProjectTimeResponseDto>($"{ApiEndpoint}?{parameters}");
    }

    private string GetRowClass(bool isEducation, bool isFinished)
    {
        string rowClass = string.Empty;

        if (isAdmin == true)
        {
            if (isEducation)
            {
                rowClass += "education-row ";
            }
        }

        if (isFinished)
        {
            rowClass += "finished-row";
        }

        return rowClass.Trim();
    }
}